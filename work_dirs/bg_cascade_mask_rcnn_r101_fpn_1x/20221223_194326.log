2022-12-23 19:43:26,537 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.10 (default, Jun  4 2021, 14:48:32) [GCC 7.5.0]
CUDA available: True
CUDA_HOME: /usr/local/cuda
NVCC: Build cuda_11.3.r11.3/compiler.29920130_0
GPU 0: NVIDIA GeForce GTX 1050 Ti
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.1.0
PyTorch compiling details: PyTorch built with:
  - GCC 4.9
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.18.1 (Git Hash 7de7e5d02bf687f971e7668963649728356e0c20)
  - OpenMP 201307 (a.k.a. OpenMP 4.0)
  - NNPACK is enabled
  - CUDA Runtime 10.0
  - NVCC architecture flags: -gencode;arch=compute_35,code=sm_35;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_50,code=compute_50
  - CuDNN 7.5.1
  - Magma 2.5.0
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS=  -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, USE_CUDA=True, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=True, USE_NNPACK=True, USE_OPENMP=ON, 

TorchVision: 0.3.0
OpenCV: 4.6.0
MMCV: 0.5.9
MMDetection: 1.1.0+3ade35c
MMDetection Compiler: GCC 9.4
MMDetection CUDA Compiler: 11.3
------------------------------------------------------------

2022-12-23 19:43:26,539 - mmdet - INFO - Distributed training: False
2022-12-23 19:43:26,540 - mmdet - INFO - Config:
/mnt/d/myWorkspace/code/x-ray/security-dataset-bg/configs/bg_sda_cascade_mask_rcnn_fpn_1x.py
# model settings
model = dict(
    type='BGCascadeRCNN',
    num_stages=3,
    pretrained='torchvision://resnet101',
    backbone=dict(type='ResNet',
                  depth=101,
                  num_stages=4,
                  out_indices=(0, 1, 2, 3),
                  frozen_stages=1,
                  norm_cfg=dict(type='BN', requires_grad=True),
                  style='pytorch'),
    neck=dict(type='FPN',
              in_channels=[256, 512, 1024, 2048],
              out_channels=256,
              num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_scales=[8],
        # anchor_scales=[2, 4, 8, 16, 32],
        anchor_ratios=[0.5, 1.0, 2.0],
        anchor_strides=[4, 8, 16, 32, 64],
        # anchor_strides=[16],
        target_means=[.0, .0, .0, .0],
        target_stds=[1.0, 1.0, 1.0, 1.0],
        loss_cls=dict(type='CrossEntropyLoss',
                      use_sigmoid=True,
                      loss_weight=1.0),
        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=1.0)),
    bbox_roi_extractor=dict(type='SingleRoIExtractor',
                            roi_layer=dict(type='RoIAlign',
                                           out_size=7,
                                           sample_num=2),
                            out_channels=256,
                            featmap_strides=[4, 8, 16, 32]),
    # featmap_strides=[16]),
    bbox_head=[
        dict(
            type='ColorSimBBoxHead',
            num_fcs=2,
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=13,
            target_means=[0., 0., 0., 0.],
            target_stds=[0.1, 0.1, 0.2, 0.2],
            reg_class_agnostic=True,
            loss_cls=dict(
                type='CrossEntropyLoss',  # 分类损失函数
                use_sigmoid=False,
                loss_weight=1.0),
            loss_bbox=dict(
                type='SmoothL1Loss',  # 回归损失函数
                beta=1.0,
                loss_weight=1.0)),
        dict(type='ColorSimBBoxHead',
             num_fcs=2,
             in_channels=256,
             fc_out_channels=1024,
             roi_feat_size=7,
             num_classes=13,
             target_means=[0., 0., 0., 0.],
             target_stds=[0.05, 0.05, 0.1, 0.1],
             reg_class_agnostic=True,
             loss_cls=dict(type='CrossEntropyLoss',
                           use_sigmoid=False,
                           loss_weight=1.0),
             loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0)),
        dict(type='ColorSimBBoxHead',
             num_fcs=2,
             in_channels=256,
             fc_out_channels=1024,
             roi_feat_size=7,
             num_classes=13,
             target_means=[0., 0., 0., 0.],
             target_stds=[0.033, 0.033, 0.067, 0.067],
             reg_class_agnostic=True,
             loss_cls=dict(type='CrossEntropyLoss',
                           use_sigmoid=False,
                           loss_weight=1.0),
             loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
    ],
    mask_roi_extractor=dict(type='SingleRoIExtractor',
                            roi_layer=dict(type='RoIAlign',
                                           out_size=14,
                                           sample_num=2),
                            out_channels=256,
                            featmap_strides=[4, 8, 16, 32]),
    # featmap_strides=[16]),
    mask_head=dict(type='FCNMaskHead',
                   num_convs=4,
                   in_channels=256,
                   conv_out_channels=256,
                   num_classes=13,
                   loss_mask=dict(type='CrossEntropyLoss',
                                  use_mask=True,
                                  loss_weight=1.0)))
# model training and testing settings
train_cfg = dict(rpn=dict(assigner=dict(type='MaxIoUAssigner',
                                        pos_iou_thr=0.7,
                                        neg_iou_thr=0.3,
                                        min_pos_iou=0.3,
                                        ignore_iof_thr=-1),
                          sampler=dict(type='RandomSampler',
                                       num=256,
                                       pos_fraction=0.5,
                                       neg_pos_ub=-1,
                                       add_gt_as_proposals=False),
                          allowed_border=0,
                          pos_weight=-1,
                          debug=False),
                 rpn_proposal=dict(nms_across_levels=False,
                                   nms_pre=2000,
                                   nms_post=2000,
                                   max_num=2000,
                                   nms_thr=0.7,
                                   min_bbox_size=0),
                 rcnn=[
                     dict(assigner=dict(type='MaxIoUAssigner',
                                        pos_iou_thr=0.5,
                                        neg_iou_thr=0.5,
                                        min_pos_iou=0.5,
                                        ignore_iof_thr=-1),
                          sampler=dict(type='RandomSampler',
                                       num=512,
                                       pos_fraction=0.25,
                                       neg_pos_ub=-1,
                                       add_gt_as_proposals=True),
                          mask_size=28,
                          pos_weight=-1,
                          debug=False),
                     dict(assigner=dict(type='MaxIoUAssigner',
                                        pos_iou_thr=0.6,
                                        neg_iou_thr=0.6,
                                        min_pos_iou=0.6,
                                        ignore_iof_thr=-1),
                          sampler=dict(type='RandomSampler',
                                       num=512,
                                       pos_fraction=0.25,
                                       neg_pos_ub=-1,
                                       add_gt_as_proposals=True),
                          mask_size=28,
                          pos_weight=-1,
                          debug=False),
                     dict(assigner=dict(type='MaxIoUAssigner',
                                        pos_iou_thr=0.7,
                                        neg_iou_thr=0.7,
                                        min_pos_iou=0.7,
                                        ignore_iof_thr=-1),
                          sampler=dict(type='RandomSampler',
                                       num=512,
                                       pos_fraction=0.25,
                                       neg_pos_ub=-1,
                                       add_gt_as_proposals=True),
                          mask_size=28,
                          pos_weight=-1,
                          debug=False)
                 ],
                 stage_loss_weights=[1, 0.5, 0.25])
test_cfg = dict(rpn=dict(nms_across_levels=False,
                         nms_pre=1000,
                         nms_post=1000,
                         max_num=1000,
                         nms_thr=0.7,
                         min_bbox_size=0),
                rcnn=dict(score_thr=0.05,
                          nms=dict(type='nms', iou_thr=0.5),
                          max_per_img=100,
                          mask_thr_binary=0.5))
# dataset settings
dataset_type = 'PIDray'
# data_root = 'data/pidray/'/mnt/d/myProgram/datasets/PIDray/pidray
data_root = '/mnt/d/myWorkspace/datasets/PIDray/pidray/'
# data_root = '/hy-tmp/pidray/'
img_norm_cfg = dict(mean=[127.5, 127.5, 127.5],
                    std=[127.5, 127.5, 127.5],
                    to_rgb=True)

train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadEdgeMapFromFile', to_float32=True),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='BGResize', img_scale=(500, 500), keep_ratio=True),
    dict(type='BGRandomFlip', flip_ratio=0.5),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='BGPad', size_divisor=32),
    dict(type='BGFormatBundle'),
    dict(type='Collect',
         keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks', 'edge_map']),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='MultiScaleFlipAug',
         img_scale=(500, 500),
         flip=False,
         transforms=[
             dict(type='Resize', img_scale=(500, 500), keep_ratio=True),
             dict(type='RandomFlip', flip_ratio=0.5),
             dict(type='Normalize', **img_norm_cfg),
             dict(type='Pad', size_divisor=32),
             dict(type='ImageToTensor', keys=['img']),
             dict(type='Collect', keys=['img']),
         ])
]
#
data = dict(
    imgs_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type=dataset_type,
        ann_file=data_root + 'annotations/xray_train.json',
        # ann_file=data_root + 'annotations/xray_test.json',
        # ann_file=data_root + 'annotations/test.json',
        img_prefix=data_root + 'train/',
        edge_map_prefix=data_root + 'train_edge_mask/',
        pipeline=train_pipeline),
    val=dict(
        type=dataset_type,
        ann_file=data_root + 'annotations/xray_test_hidden.json',
        img_prefix=data_root + 'hidden/',
        # ann_file=data_root + 'annotations/xray_test.json',
        # img_prefix=data_root + 'train/',
        edge_map_prefix=data_root + 'train_edge_mask/',
        pipeline=test_pipeline),
    test=dict(
        type=dataset_type,
        # ann_file=data_root + 'annotations/xray_test_hidden.json',
        # img_prefix=data_root + 'hidden/',
        # ann_file=data_root + 'annotations/xray_test.json',
        # img_prefix=data_root + 'train/',
        ann_file=data_root + 'annotations/xray_test_hard.json',
        img_prefix=data_root + 'hard/',
        edge_map_prefix=data_root + 'train_edge_mask/',
        pipeline=test_pipeline))
evaluation = dict(interval=1, metric=['bbox', 'segm'])
# optimizer
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
# learning policy
lr_config = dict(policy='step',
                 warmup='linear',
                 warmup_iters=500,
                 warmup_ratio=1.0 / 3,
                 step=[8, 11])
checkpoint_config = dict(interval=1)
# yapf:disable
log_config = dict(
    interval=50,
    hooks=[
        dict(type='TextLoggerHook'),
        # dict(type='TensorboardLoggerHook')
    ])
# yapf:enable
# runtime settings
total_epochs = 12
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = '/mnt/d/myWorkspace/code/x-ray/security-dataset-bg/work_dirs/bg_cascade_mask_rcnn_r101_fpn_1x'
# work_dir = '/hy-tmp/work_dirs/bg_cascade_mask_rcnn_r101_fpn_1x'
load_from = None
resume_from = None
workflow = [('train', 1)]

